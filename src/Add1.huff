
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {

push1 0x04
calldataload // load the first 4 bytes of calldata into the stack

push1 0x04
push1 0x00
push1 0x00
calldatacopy

push1 0x00
mload

push1 0xe0
shr


push4   0xa8365728  // [0xa8365728, 0x60fe47b1]
eq                      // [0]
push1 0x1e
jumpi

push1 0x00
push1 0x00
revert 
    
    
jumpdest
push1 0x04      // [0x04] offset the function parameters
calldataload    // [first parameter]
push1 0x01
add
    
push1 0x00
mstore

// return 1
// return 32 bytes of memory starting at offset 0
push1 0x20            // [32]
push1 0x00            // [0, 32]
return          // []
}

