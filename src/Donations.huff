/** 
 *  DONATIONS HUFF EXERCISE
 *  
 *  The task is to Implement solidity's "receive" functionality which allows sending ether to a smart contract without any calldata
 *  also have a getter function that returns how much an address has donated. Addresses can donate several times
 */

#define function donated(address) payable returns(uint256)

#define macro MAIN() = takes(0) returns(0) {

push1 0x04
push1 0x00
push1 0x00
calldatacopy

push1 0x00
mload

push1 0xe0
shr
dup1

push4 0xfb690dcc
eq
push1 0x41
jumpi


    // check for any data, revert if there is data
    calldatasize
    push1 0x00
    gt
    push1 0x68
    jumpi

    // storing the value in addition of previous balance for specific address in slot 0
    push1 0x20
    push1 0x00
    mstore

    push1 0x40
    push1 0x20
    mstore

    caller
    push1 0x40  // storing the caller
    mstore

    push1 0x00
    push1 0x60  // storing the slot index
    mstore

    
    push1 0x80
    push1 0x00  // hash from memory 0 to 80 ( including all metadata length and the real data)
    sha3

    dup1    
    sload // get the previous balance
    callvalue 
    add  // add the new value

    swap1  // swap the hash slot and the new number
    sstore
    
    push1 0x00
    push1 0x00
    return
    
    
    jumpdest
    push1 0x20
    push1 0x00
    mstore

    push1 0x40
    push1 0x20
    mstore

    caller
    push1 0x40  // storing the caller
    mstore

    push1 0x00
    push1 0x60  // storing the slot index
    mstore

    
    push1 0x80
    push1 0x00  // hash from memory 0 to 80 ( including all metadata length and the real data)
    sha3
    sload
    
    push1 0x00
    mstore
    
    push1 0x20
    push1 0x00
    return
    
    jumpdest
    push1 0x00
    push1 0x00
    revert
}