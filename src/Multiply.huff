
/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply` that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function multiply(uint256, uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
push1 0x04
calldataload // load the first parameter of calldata into the stack

push1 0x04
push1 0x00
push1 0x00
calldatacopy

push1 0x00
mload

push1 0xe0
shr

push4   0x165c4a16      // [0x165c4a16, 0x60fe47b1]
eq                      // [0]
push1 0x1e
jumpi

push1 0x00
push1 0x00
revert 
    
    
jumpdest
push1 0x04      // [0x04] offset the function parameters
calldataload    // [first parameter]

push1 0x24
calldataload    // load the first parameter of calldata into the stack

MUL
dup1

push1 0x04      // [0x04] offset the function parameters
calldataload    // [first parameter]
swap1
div

push1 0x24
calldataload
eq
push1 0x38
jumpi    
push1 0x00
push1 0x00
revert

jumpdest
push1 0x00
mstore
// return 1
// return 32 bytes of memory starting at offset 0
push1 0x20            // [32]
push1 0x00            // [0, 32]
return          // []
}

// 0x165c4a160000000000000000000000000000000000000000000000000000000000000002ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

// 0x165c4a1600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003

// 0000000000000000000000000000000000000000000000000000000000000006

// 0x165c4a16000000000000000000000000000000000000000000000000000000000000003f
//           0000000000000000000000000000000000000000000000000000000000000036
