
/**
 *  REVERT_CUSTOM HUFF EXERCISE
 *
 *
 *  When a transaction is being executed within a smart contract, based on the logic of that contract, it can revert if a preset condition is not met.
 *  They're 2 main ways to revert in solidity, 
 *  - using a string error message e,g (`require(x != 0, "Only values above 0");`)
 *  - reverting with a custom error e.g (`if(x == 0) revert OnlyValuesAbove0();`)
 *
 *  The task is to write within the `MAIN` macro below, huff code that reverts (all the time) with the custom error `OnlyHuff()`
*/

#define error OnlyHuff()

#define macro MAIN() = takes(0) returns(0) {

    // function singOnluHuff() public pure returns (bytes32) {
    //     return keccak256(("OnlyHuff()"));
    // }

    // since there is no abi.encode
    // we just provide hash the provide the location in memory for "OnlyHuff()" and the length

    // push1 0x020 // location of "OnlyHuff()" bytes
    // push1 0x0a  // length of "OnlyHuff()" bytes
    // SHA3

push32 0xe829737a9f3a0deff344bce4ded8041e9ac3a1391a12e5abf2b77731694ef944
push1 0x00
mstore

push1 0x20
push1 0x00
revert
}